pipeline {
    parameters {
        string(name: 'ENGINE_OVERRIDE_NAME', defaultValue: 'MultiplayerEngine.ini', description: 'Specify the engine override name')
        string(name: 'DEPOT_SOURCE', defaultValue: '//depot/ClonkBR/...', description: 'Specify the Perforce depot source.')
        string(name: 'BUILD_SCRIPTS_REPO', defaultValue: 'https://github.com/steve-supernimbus/sample-build-scripts', description: 'Specify the Github build script repository.')
        string(name: 'PROJECT_WS', defaultValue: 'GameLiftTutorial-Incremental', description: 'Specify the projects workspace')
        string(name: 'EMAIL_LIST', defaultValue: 'stephen@supernimbus.net', description: 'Specify emails of people who want to be notified of build results. Separate emails with a comma. Do not include whitespace')
        string(name: 'EMAIL_REPLY_TO', defaultValue: 'stephen@supernimbus.net', description: 'Specify the reply-to email.')
        string(name: 'MAPS', defaultValue: '/Game/Clonk/Maps/TestLevels/TestLevel_HubMap_Mobile+/Game/Clonk/Maps/TestLevels/LVL_ClayYeetsShowcase', description: 'Specify the Maps.')
        string(name: 'SLACK_NOTIFICATION_WEBHOOK', defaultValue: 'todo', description: 'Specify a slack notification webhook.')
        string(name: 'CLIENT_S3_BUCKET', defaultValue: 'clonk-client-development', description: 'Specify the client S3 Bucket.')
        string(name: 'SERVER_S3_BUCKET', defaultValue: 'clonk-server-development', description: 'Specify the server S3 Bucket.')
    }

    triggers {
        cron('H(0-10) 0 * * 1-5')
    }

    environment {
        REMOTE_S3_DIRECTORY = 'nightly-builds'
        WORKSPACE = "jenkins-remote-${JOB_NAME}"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
    }

    agent {
        label 'windows-base-development'
    }

    stages {
        stage('Set Build Name') {
            steps {
                echo 'STAGE - Set Build Name'
                script {
                    def currentDate = new Date().format("dd-MM-yyyy")
                    currentBuild.displayName = "Nightly_${currentDate}_${env.BUILD_TAG}"
                    env.BUILD_NAME = currentBuild.displayName
                }
                echo "Build will be called: ${env.BUILD_NAME}"
            }
        }

        stage('Sync Build Scripts') {
            steps {
                echo 'STAGE - Sync Build Scripts'
                dir('build-scripts') {
                    git(
                        url: "${params.BUILD_SCRIPTS_REPO}",
                        branch: "main",
                        changelog: true,
                        poll: true
                    )
                    stash(name: 'build', includes: 'build.py')
                    stash(name: 'upload', includes: 'upload.py')
                    stash(name: 'read-write', includes: 'read-write.py')
                    stash(name: 'ini-override', includes: 'ini-override.py')
                    dir('configs/ini-files/engine') {
                        stash(name: 'engine-override', includes: "${params.ENGINE_OVERRIDE_NAME}")
                    }
                }
            }
        }

        stage('Sync Project Files') {
            steps {
                echo 'STAGE - Sync Project Files'
                dir('project') {
                    p4sync(
                        charset: 'none',
                        credential: 'p4-creds',
                        format: "${params.PROJECT_WS}",
                        populate: autoClean(
                            delete: true,
                            modtime: false,
                            parallel: [enable: false, minbytes: '1024', minfiles: '1', threads: '4'],
                            pin: '',
                            quiet: true,
                            replace: true,
                            tidy: false
                        ),
                        source: depotSource("${params.DEPOT_SOURCE}")
                    )
                }
            }
        }

        stage('Make Project Read/Writable') {
            steps {
                echo 'STAGE - Make Project Read/Writable'
                dir('project') {
                    unstash 'read-write'
                    powershell "python -u read-write.py"
                }
            }
        }

        //stage('Override Ini Files') {
        //    steps {
        //        dir('project') {
        //            unstash('ini-override')

        //            dir('temp') {
        //                unstash('engine-override')
        //            }

        //            powershell "python -u ini-override.py --engine-override-path='.\\temp\\${params.ENGINE_OVERRIDE_NAME}'"

        //            dir('temp') {
        //                deleteDir()
        //            }
        //        }
        //    }
        //}

        stage('Build Pre-Requisites') {
            steps {
                echo 'STAGE - Build Pre-Requisites'
                dir('project') {
                    unstash 'build'
                    powershell "python -u build.py --pre-reqs True"
                }
            }
        }

        stage('Clean Environment') {
            steps {
                dir('project') {
                    unstash 'upload'
                    powershell "python -u upload.py --clean=True"
                }
            }
        }

        stage('Build Client') {
            steps {
                dir('project') {
                    unstash 'build'
                    powershell "python -u build.py --mode client --maps=${params.MAPS}"
                }
            }
        }

        stage('Upload Client Build') {
            steps {
                dir('project') {
                    unstash 'upload'
                    powershell "python -u upload.py --bucket='${params.CLIENT_S3_BUCKET}' --local-directory='client-zips' --remote-directory='${env.REMOTE_S3_DIRECTORY}'"
                }
            }
        }

        stage('Build Server') {
            steps {
                dir('project') {
                    unstash 'build'
                    powershell "python -u build.py --mode server --maps=${params.MAPS}"
                }
            }
        }

        stage('Upload Server Build') {
            steps {
                dir('project') {
                    unstash 'upload'
                    powershell "python -u upload.py --bucket='${params.SERVER_S3_BUCKET}' --local-directory='server-zips' --remote-directory='${env.REMOTE_S3_DIRECTORY}'"
                }
            }
        }

        stage('Get Upload URLs') {
            steps {
                dir('project') {
                    script {
                        env.BUILD_URLS = readFile('urls.txt').trim()
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Build completed: SUCCESS"
            emailext(
                attachLog: true,
                body: """Successful - Jenkins Nightly Build - ${env.JOB_NAME}
--------------------------------------------------------------------------------------
${env.JOB_NAME} built successfully.

Build URLs: ${env.BUILD_URLS}
--------------------------------------------------------------------------------------
""",
                compressLog: true,
                replyTo: "${params.EMAIL_REPLY_TO}",
                subject: "Successful - Jenkins Nightly Build- ${env.JOB_NAME}",
                to: "${params.EMAIL_LIST}"
            )
        }
        failure {
            echo "Build completed: FAILURE"
            emailext(
                attachLog: true,
                body: """Failure - Jenkins Nightly Build- ${env.JOB_NAME}
--------------------------------------------------------------------------------------
${env.JOB_NAME} built with errors.
--------------------------------------------------------------------------------------
""",
                compressLog: true,
                replyTo: "${params.EMAIL_REPLY_TO}",
                subject: "Failure - Jenkins Nightly Build - ${env.JOB_NAME}",
                to: "${params.EMAIL_LIST}"
            )
        }
    }
}
