pipeline {
    triggers {
        cron('H(0-10) 0 * * 1-5')
    }
    
    parameters {
        string(name: 'DEPOT_SOURCE', defaultValue: '//depot/ClonkBR/...', description: 'Specify the Perforce depot source.')
        string(name: 'BUILD_SCRIPTS_REPO', defaultValue: 'https://github.com/steve-supernimbus/sample-build-scripts', description: 'Specify the Github build script repository.')
        string(name: 'PROJECT_WS', defaultValue: 'GameLiftTutorial-Nightly', description: 'Specify the projects workspace')
        string(name: 'EMAIL_LIST', defaultValue: 'stephen@supernimbus.net', description: 'Specify emails of people who want to be notified of build results. Separate emails with a comma. Do not include whitespace')
        string(name: 'EMAIL_REPLY_TO', defaultValue: 'stephen@supernimbus.net', description: 'Specify the reply-to email.')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
    }

    agent {
        label 'windows-base'
    }

    stages {
        stage('Set Build Name') {
            steps {
                echo 'STAGE - Set Build Name'
                script {
                    def currentDate = new Date().format("dd-MM-yyyy")
                    currentBuild.displayName = "Nightly_${currentDate}_${env.BUILD_TAG}"
                    env.BUILD_NAME = currentBuild.displayName
                }
                echo "Build will be called: ${env.BUILD_NAME}"
            }
        }

        stage('Sync Build Scripts') {
            steps {
                echo 'STAGE - Sync Build Scripts'
                dir('build-scripts'){
                    git(
                        url: "${params.BUILD_SCRIPTS_REPO}",
                        branch: "main",
                        changelog: true,
                        poll: true
                    )
                    
                    stash(name: 'build', includes: 'build.py')
                    stash(name: 'upload', includes: 'upload.py')
                    stash(name: 'read-write', includes: 'read-write.py')
                }
            }
        }

        stage('Sync Project Files') {
            steps {
                echo 'STAGE - Sync Project Files'
                dir('project') {
                    p4sync(
                        charset: 'none',
                        credential: 'perforce-credentials',
                        format: "${params.PROJECT_WS}",
                        populate: autoClean(
                            delete: true,
                            modtime: false,
                            parallel: [enable: false, minbytes: '1024', minfiles: '1', threads: '4'],
                            pin: '',
                            quiet: true,
                            replace: true,
                            tidy: false
                        ),
                        source: depotSource("${params.DEPOT_SOURCE}")
                    )
                }
            }
        }

        stage('Make Project Read/Writable') {
            steps {
                echo 'STAGE - Make Project Read/Writable'
                dir('project') {
                    unstash 'read-write'
                    powershell "python -u read-write.py"
                }
            }
        }

        stage('Build Project') {
            steps {
                echo 'STAGE - Build Project'
                dir('project') {
                    unstash 'build'
                    powershell "python -u build.py"
                }
            }
        }
        
        stage('Upload Project') {
            steps {
                dir('project') {
                    unstash 'upload'
                    powershell "python -u upload.py"
                    
                    script {
                        env.BUILD_URLS = readFile('url.txt').trim()
                    }
                }
            }
        }
    }

//    post {
//        success {
//            echo "Build completed: SUCCESS"
//            emailext(
//                attachLog: true,
//                body: """Successful - Jenkins Build - ${env.JOB_NAME}
//--------------------------------------------------------------------------------------
//${env.JOB_NAME} built successfully.
//
//Build URL: ${env.BUILD_URLS}
//--------------------------------------------------------------------------------------
//""",
//                compressLog: true,
//                replyTo: "${params.EMAIL_REPLY_TO}",
//                subject: "Successful - Jenkins Build- ${env.JOB_NAME}",
//                to: "${params.EMAIL_LIST}"
//            )
//        }
//        failure {
//            echo "Build completed: FAILURE"
//            emailext(
//                attachLog: true,
//                body: """Failure - Jenkins Build- ${env.JOB_NAME}
//--------------------------------------------------------------------------------------
//${env.JOB_NAME} built with errors.
//--------------------------------------------------------------------------------------
//""",
//                compressLog: true,
//                replyTo: "${params.EMAIL_REPLY_TO}",
//                subject: "Failure - Jenkins Build - ${env.JOB_NAME}",
//                to: "${params.EMAIL_LIST}"
//            )
//        }
//    }
}
